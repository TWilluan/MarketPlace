"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _slate = require("slate");
const _slatereact = require("slate-react");
const _IndentLeft = /*#__PURE__*/ _interop_require_default(require("../../icons/IndentLeft"));
const _IndentRight = /*#__PURE__*/ _interop_require_default(require("../../icons/IndentRight"));
const _Button = require("../Button");
const _getCommonBlock = require("../getCommonBlock");
const _isActive = /*#__PURE__*/ _interop_require_default(require("../isActive"));
const _isBlockElement = require("../isBlockElement");
const _listTypes = /*#__PURE__*/ _interop_require_default(require("../listTypes"));
const _unwrapList = require("../unwrapList");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const indentType = 'indent';
const IndentWithPadding = ({ attributes, children })=>/*#__PURE__*/ _react.default.createElement("div", {
        style: {
            paddingLeft: 25
        },
        ...attributes
    }, children);
const indent = {
    Button: ()=>{
        const editor = (0, _slatereact.useSlate)();
        const handleIndent = (0, _react.useCallback)((e, dir)=>{
            e.preventDefault();
            if (dir === 'left') {
                if ((0, _isActive.default)(editor, 'li')) {
                    const [, listPath] = (0, _getCommonBlock.getCommonBlock)(editor, (n)=>_slate.Element.isElement(n) && _listTypes.default.includes(n.type));
                    const matchedParentList = _slate.Editor.above(editor, {
                        at: listPath,
                        match: (n)=>!_slate.Editor.isEditor(n) && (0, _isBlockElement.isBlockElement)(editor, n)
                    });
                    if (matchedParentList) {
                        const [parentListItem, parentListItemPath] = matchedParentList;
                        if (parentListItem.children.length > 1) {
                            // Remove nested list
                            _slate.Transforms.unwrapNodes(editor, {
                                at: parentListItemPath,
                                match: (node, path)=>{
                                    const matches = !_slate.Editor.isEditor(node) && _slate.Element.isElement(node) && _listTypes.default.includes(node.type) && path.length === parentListItemPath.length + 1;
                                    return matches;
                                }
                            });
                            // Set li type on any children that don't have a type
                            _slate.Transforms.setNodes(editor, {
                                type: 'li'
                            }, {
                                at: parentListItemPath,
                                match: (node, path)=>{
                                    const matches = !_slate.Editor.isEditor(node) && _slate.Element.isElement(node) && node.type !== 'li' && path.length === parentListItemPath.length + 1;
                                    return matches;
                                }
                            });
                            // Parent list item path has changed at this point
                            // so we need to re-fetch the parent node
                            const [newParentNode] = _slate.Editor.node(editor, parentListItemPath);
                            // If the parent node is an li,
                            // lift all li nodes within
                            if (_slate.Element.isElement(newParentNode) && newParentNode.type === 'li') {
                                // Lift the nested lis
                                _slate.Transforms.liftNodes(editor, {
                                    at: parentListItemPath,
                                    match: (node, path)=>{
                                        const matches = !_slate.Editor.isEditor(node) && _slate.Element.isElement(node) && path.length === parentListItemPath.length + 1 && node.type === 'li';
                                        return matches;
                                    }
                                });
                            }
                        } else {
                            _slate.Transforms.unwrapNodes(editor, {
                                at: parentListItemPath,
                                match: (node, path)=>{
                                    return _slate.Element.isElement(node) && node.type === 'li' && path.length === parentListItemPath.length;
                                }
                            });
                            _slate.Transforms.unwrapNodes(editor, {
                                match: (n)=>_slate.Element.isElement(n) && _listTypes.default.includes(n.type)
                            });
                        }
                    } else {
                        (0, _unwrapList.unwrapList)(editor, listPath);
                    }
                } else {
                    _slate.Transforms.unwrapNodes(editor, {
                        match: (n)=>_slate.Element.isElement(n) && n.type === indentType,
                        mode: 'lowest',
                        split: true
                    });
                }
            }
            if (dir === 'right') {
                const isCurrentlyOL = (0, _isActive.default)(editor, 'ol');
                const isCurrentlyUL = (0, _isActive.default)(editor, 'ul');
                if (isCurrentlyOL || isCurrentlyUL) {
                    // Get the path of the first selected li -
                    // Multiple lis could be selected
                    // and the selection may start in the middle of the first li
                    const [[, firstSelectedLIPath]] = Array.from(_slate.Editor.nodes(editor, {
                        match: (node)=>_slate.Element.isElement(node) && node.type === 'li',
                        mode: 'lowest'
                    }));
                    // Is the first selected li the first in its list?
                    const hasPrecedingLI = firstSelectedLIPath[firstSelectedLIPath.length - 1] > 0;
                    // If the first selected li is NOT the first in its list,
                    // we need to inject it into the prior li
                    if (hasPrecedingLI) {
                        const [, precedingLIPath] = _slate.Editor.previous(editor, {
                            at: firstSelectedLIPath
                        });
                        const [precedingLIChildren] = _slate.Editor.node(editor, [
                            ...precedingLIPath,
                            0
                        ]);
                        const precedingLIChildrenIsText = _slate.Text.isText(precedingLIChildren);
                        if (precedingLIChildrenIsText) {
                            // Wrap the prior li text content so that it can be nested next to a list
                            _slate.Transforms.wrapNodes(editor, {
                                children: []
                            }, {
                                at: [
                                    ...precedingLIPath,
                                    0
                                ]
                            });
                        }
                        // Move the selected lis after the prior li contents
                        _slate.Transforms.moveNodes(editor, {
                            match: (node)=>_slate.Element.isElement(node) && node.type === 'li',
                            mode: 'lowest',
                            to: [
                                ...precedingLIPath,
                                1
                            ]
                        });
                        // Wrap the selected lis in a new list
                        _slate.Transforms.wrapNodes(editor, {
                            children: [],
                            type: isCurrentlyOL ? 'ol' : 'ul'
                        }, {
                            match: (node)=>_slate.Element.isElement(node) && node.type === 'li',
                            mode: 'lowest'
                        });
                    } else {
                        // Otherwise, just wrap the node in a list / li
                        _slate.Transforms.wrapNodes(editor, {
                            children: [
                                {
                                    children: [],
                                    type: 'li'
                                }
                            ],
                            type: isCurrentlyOL ? 'ol' : 'ul'
                        }, {
                            match: (node)=>_slate.Element.isElement(node) && node.type === 'li',
                            mode: 'lowest'
                        });
                    }
                } else {
                    _slate.Transforms.wrapNodes(editor, {
                        children: [],
                        type: indentType
                    });
                }
            }
            _slatereact.ReactEditor.focus(editor);
        }, [
            editor
        ]);
        const canDeIndent = (0, _isActive.default)(editor, 'li') || (0, _isActive.default)(editor, indentType);
        return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement("button", {
            className: [
                _Button.baseClass,
                !canDeIndent && `${_Button.baseClass}--disabled`
            ].filter(Boolean).join(' '),
            onClick: canDeIndent ? (e)=>handleIndent(e, 'left') : undefined,
            type: "button"
        }, /*#__PURE__*/ _react.default.createElement(_IndentLeft.default, null)), /*#__PURE__*/ _react.default.createElement("button", {
            className: _Button.baseClass,
            onClick: (e)=>handleIndent(e, 'right'),
            type: "button"
        }, /*#__PURE__*/ _react.default.createElement(_IndentRight.default, null)));
    },
    Element: IndentWithPadding
};
const _default = indent;

//# sourceMappingURL=data:application/json;base64,