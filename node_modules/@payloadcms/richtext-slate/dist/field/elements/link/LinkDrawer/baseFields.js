"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getBaseFields", {
    enumerable: true,
    get: function() {
        return getBaseFields;
    }
});
const _utilities = require("payload/utilities");
const translations = (0, _utilities.extractTranslations)([
    'fields:textToDisplay',
    'fields:linkType',
    'fields:chooseBetweenCustomTextOrDocument',
    'fields:customURL',
    'fields:internalLink',
    'fields:enterURL',
    'fields:chooseDocumentToLink',
    'fields:openInNewTab'
]);
const getBaseFields = (config)=>[
        {
            name: 'text',
            label: translations['fields:textToDisplay'],
            required: true,
            type: 'text'
        },
        {
            name: 'linkType',
            admin: {
                description: translations['fields:chooseBetweenCustomTextOrDocument']
            },
            defaultValue: 'custom',
            label: translations['fields:linkType'],
            options: [
                {
                    label: translations['fields:customURL'],
                    value: 'custom'
                },
                {
                    label: translations['fields:internalLink'],
                    value: 'internal'
                }
            ],
            required: true,
            type: 'radio'
        },
        {
            name: 'url',
            admin: {
                condition: ({ linkType })=>linkType !== 'internal'
            },
            label: translations['fields:enterURL'],
            required: true,
            type: 'text'
        },
        {
            name: 'doc',
            admin: {
                condition: ({ linkType })=>{
                    return linkType === 'internal';
                }
            },
            // when admin.hidden is a function we need to dynamically call hidden with the user to know if the collection should be shown
            filterOptions: ({ relationTo, user })=>{
                const hidden = config.collections.find(({ slug })=>slug === relationTo).admin.hidden;
                if (typeof hidden === 'function' && hidden({
                    user
                })) {
                    return false;
                }
            },
            label: translations['fields:chooseDocumentToLink'],
            relationTo: config.collections.filter(({ admin: { enableRichTextLink, hidden } })=>{
                if (typeof hidden !== 'function' && hidden) {
                    return false;
                }
                return enableRichTextLink;
            }).map(({ slug })=>slug),
            required: true,
            type: 'relationship'
        },
        {
            name: 'newTab',
            label: translations['fields:openInNewTab'],
            type: 'checkbox'
        }
    ];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9maWVsZC9lbGVtZW50cy9saW5rL0xpbmtEcmF3ZXIvYmFzZUZpZWxkcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFVzZXIgfSBmcm9tICdwYXlsb2FkL2F1dGgnXG5pbXBvcnQgdHlwZSB7IENvbmZpZyB9IGZyb20gJ3BheWxvYWQvY29uZmlnJ1xuaW1wb3J0IHR5cGUgeyBGaWVsZCB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB7IGV4dHJhY3RUcmFuc2xhdGlvbnMgfSBmcm9tICdwYXlsb2FkL3V0aWxpdGllcydcblxuY29uc3QgdHJhbnNsYXRpb25zID0gZXh0cmFjdFRyYW5zbGF0aW9ucyhbXG4gICdmaWVsZHM6dGV4dFRvRGlzcGxheScsXG4gICdmaWVsZHM6bGlua1R5cGUnLFxuICAnZmllbGRzOmNob29zZUJldHdlZW5DdXN0b21UZXh0T3JEb2N1bWVudCcsXG4gICdmaWVsZHM6Y3VzdG9tVVJMJyxcbiAgJ2ZpZWxkczppbnRlcm5hbExpbmsnLFxuICAnZmllbGRzOmVudGVyVVJMJyxcbiAgJ2ZpZWxkczpjaG9vc2VEb2N1bWVudFRvTGluaycsXG4gICdmaWVsZHM6b3BlbkluTmV3VGFiJyxcbl0pXG5cbmV4cG9ydCBjb25zdCBnZXRCYXNlRmllbGRzID0gKGNvbmZpZzogQ29uZmlnKTogRmllbGRbXSA9PiBbXG4gIHtcbiAgICBuYW1lOiAndGV4dCcsXG4gICAgbGFiZWw6IHRyYW5zbGF0aW9uc1snZmllbGRzOnRleHRUb0Rpc3BsYXknXSxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB0eXBlOiAndGV4dCcsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnbGlua1R5cGUnLFxuICAgIGFkbWluOiB7XG4gICAgICBkZXNjcmlwdGlvbjogdHJhbnNsYXRpb25zWydmaWVsZHM6Y2hvb3NlQmV0d2VlbkN1c3RvbVRleHRPckRvY3VtZW50J10sXG4gICAgfSxcbiAgICBkZWZhdWx0VmFsdWU6ICdjdXN0b20nLFxuICAgIGxhYmVsOiB0cmFuc2xhdGlvbnNbJ2ZpZWxkczpsaW5rVHlwZSddLFxuICAgIG9wdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgbGFiZWw6IHRyYW5zbGF0aW9uc1snZmllbGRzOmN1c3RvbVVSTCddLFxuICAgICAgICB2YWx1ZTogJ2N1c3RvbScsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBsYWJlbDogdHJhbnNsYXRpb25zWydmaWVsZHM6aW50ZXJuYWxMaW5rJ10sXG4gICAgICAgIHZhbHVlOiAnaW50ZXJuYWwnLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIHR5cGU6ICdyYWRpbycsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAndXJsJyxcbiAgICBhZG1pbjoge1xuICAgICAgY29uZGl0aW9uOiAoeyBsaW5rVHlwZSB9KSA9PiBsaW5rVHlwZSAhPT0gJ2ludGVybmFsJyxcbiAgICB9LFxuICAgIGxhYmVsOiB0cmFuc2xhdGlvbnNbJ2ZpZWxkczplbnRlclVSTCddLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIHR5cGU6ICd0ZXh0JyxcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdkb2MnLFxuICAgIGFkbWluOiB7XG4gICAgICBjb25kaXRpb246ICh7IGxpbmtUeXBlIH0pID0+IHtcbiAgICAgICAgcmV0dXJuIGxpbmtUeXBlID09PSAnaW50ZXJuYWwnXG4gICAgICB9LFxuICAgIH0sXG4gICAgLy8gd2hlbiBhZG1pbi5oaWRkZW4gaXMgYSBmdW5jdGlvbiB3ZSBuZWVkIHRvIGR5bmFtaWNhbGx5IGNhbGwgaGlkZGVuIHdpdGggdGhlIHVzZXIgdG8ga25vdyBpZiB0aGUgY29sbGVjdGlvbiBzaG91bGQgYmUgc2hvd25cbiAgICBmaWx0ZXJPcHRpb25zOiAoeyByZWxhdGlvblRvLCB1c2VyIH0pID0+IHtcbiAgICAgIGNvbnN0IGhpZGRlbiA9IGNvbmZpZy5jb2xsZWN0aW9ucy5maW5kKCh7IHNsdWcgfSkgPT4gc2x1ZyA9PT0gcmVsYXRpb25UbykuYWRtaW4uaGlkZGVuXG4gICAgICBpZiAodHlwZW9mIGhpZGRlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBoaWRkZW4oeyB1c2VyIH0gYXMgeyB1c2VyOiBVc2VyIH0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0sXG4gICAgbGFiZWw6IHRyYW5zbGF0aW9uc1snZmllbGRzOmNob29zZURvY3VtZW50VG9MaW5rJ10sXG4gICAgcmVsYXRpb25UbzogY29uZmlnLmNvbGxlY3Rpb25zXG4gICAgICAuZmlsdGVyKCh7IGFkbWluOiB7IGVuYWJsZVJpY2hUZXh0TGluaywgaGlkZGVuIH0gfSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGhpZGRlbiAhPT0gJ2Z1bmN0aW9uJyAmJiBoaWRkZW4pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW5hYmxlUmljaFRleHRMaW5rXG4gICAgICB9KVxuICAgICAgLm1hcCgoeyBzbHVnIH0pID0+IHNsdWcpLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIHR5cGU6ICdyZWxhdGlvbnNoaXAnLFxuICB9LFxuICB7XG4gICAgbmFtZTogJ25ld1RhYicsXG4gICAgbGFiZWw6IHRyYW5zbGF0aW9uc1snZmllbGRzOm9wZW5Jbk5ld1RhYiddLFxuICAgIHR5cGU6ICdjaGVja2JveCcsXG4gIH0sXG5dXG4iXSwibmFtZXMiOlsiZ2V0QmFzZUZpZWxkcyIsInRyYW5zbGF0aW9ucyIsImV4dHJhY3RUcmFuc2xhdGlvbnMiLCJjb25maWciLCJuYW1lIiwibGFiZWwiLCJyZXF1aXJlZCIsInR5cGUiLCJhZG1pbiIsImRlc2NyaXB0aW9uIiwiZGVmYXVsdFZhbHVlIiwib3B0aW9ucyIsInZhbHVlIiwiY29uZGl0aW9uIiwibGlua1R5cGUiLCJmaWx0ZXJPcHRpb25zIiwicmVsYXRpb25UbyIsInVzZXIiLCJoaWRkZW4iLCJjb2xsZWN0aW9ucyIsImZpbmQiLCJzbHVnIiwiZmlsdGVyIiwiZW5hYmxlUmljaFRleHRMaW5rIiwibWFwIl0sIm1hcHBpbmdzIjoiOzs7OytCQWlCYUE7OztlQUFBQTs7OzJCQWJ1QjtBQUVwQyxNQUFNQyxlQUFlQyxJQUFBQSw4QkFBbUIsRUFBQztJQUN2QztJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFTSxNQUFNRixnQkFBZ0IsQ0FBQ0csU0FBNEI7UUFDeEQ7WUFDRUMsTUFBTTtZQUNOQyxPQUFPSixZQUFZLENBQUMsdUJBQXVCO1lBQzNDSyxVQUFVO1lBQ1ZDLE1BQU07UUFDUjtRQUNBO1lBQ0VILE1BQU07WUFDTkksT0FBTztnQkFDTEMsYUFBYVIsWUFBWSxDQUFDLDJDQUEyQztZQUN2RTtZQUNBUyxjQUFjO1lBQ2RMLE9BQU9KLFlBQVksQ0FBQyxrQkFBa0I7WUFDdENVLFNBQVM7Z0JBQ1A7b0JBQ0VOLE9BQU9KLFlBQVksQ0FBQyxtQkFBbUI7b0JBQ3ZDVyxPQUFPO2dCQUNUO2dCQUNBO29CQUNFUCxPQUFPSixZQUFZLENBQUMsc0JBQXNCO29CQUMxQ1csT0FBTztnQkFDVDthQUNEO1lBQ0ROLFVBQVU7WUFDVkMsTUFBTTtRQUNSO1FBQ0E7WUFDRUgsTUFBTTtZQUNOSSxPQUFPO2dCQUNMSyxXQUFXLENBQUMsRUFBRUMsUUFBUSxFQUFFLEdBQUtBLGFBQWE7WUFDNUM7WUFDQVQsT0FBT0osWUFBWSxDQUFDLGtCQUFrQjtZQUN0Q0ssVUFBVTtZQUNWQyxNQUFNO1FBQ1I7UUFDQTtZQUNFSCxNQUFNO1lBQ05JLE9BQU87Z0JBQ0xLLFdBQVcsQ0FBQyxFQUFFQyxRQUFRLEVBQUU7b0JBQ3RCLE9BQU9BLGFBQWE7Z0JBQ3RCO1lBQ0Y7WUFDQSw2SEFBNkg7WUFDN0hDLGVBQWUsQ0FBQyxFQUFFQyxVQUFVLEVBQUVDLElBQUksRUFBRTtnQkFDbEMsTUFBTUMsU0FBU2YsT0FBT2dCLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsRUFBRUMsSUFBSSxFQUFFLEdBQUtBLFNBQVNMLFlBQVlSLEtBQUssQ0FBQ1UsTUFBTTtnQkFDdEYsSUFBSSxPQUFPQSxXQUFXLGNBQWNBLE9BQU87b0JBQUVEO2dCQUFLLElBQXNCO29CQUN0RSxPQUFPO2dCQUNUO1lBQ0Y7WUFDQVosT0FBT0osWUFBWSxDQUFDLDhCQUE4QjtZQUNsRGUsWUFBWWIsT0FBT2dCLFdBQVcsQ0FDM0JHLE1BQU0sQ0FBQyxDQUFDLEVBQUVkLE9BQU8sRUFBRWUsa0JBQWtCLEVBQUVMLE1BQU0sRUFBRSxFQUFFO2dCQUNoRCxJQUFJLE9BQU9BLFdBQVcsY0FBY0EsUUFBUTtvQkFDMUMsT0FBTztnQkFDVDtnQkFDQSxPQUFPSztZQUNULEdBQ0NDLEdBQUcsQ0FBQyxDQUFDLEVBQUVILElBQUksRUFBRSxHQUFLQTtZQUNyQmYsVUFBVTtZQUNWQyxNQUFNO1FBQ1I7UUFDQTtZQUNFSCxNQUFNO1lBQ05DLE9BQU9KLFlBQVksQ0FBQyxzQkFBc0I7WUFDMUNNLE1BQU07UUFDUjtLQUNEIn0=