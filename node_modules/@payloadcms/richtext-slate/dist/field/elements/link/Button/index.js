'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LinkButton", {
    enumerable: true,
    get: function() {
        return LinkButton;
    }
});
const _modal = require("@faceless-ui/modal");
const _elements = require("payload/components/elements");
const _forms = require("payload/components/forms");
const _utilities = require("payload/components/utilities");
const _config = require("payload/config");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _slate = require("slate");
const _slatereact = require("slate-react");
const _Link = /*#__PURE__*/ _interop_require_default(require("../../../icons/Link"));
const _Button = /*#__PURE__*/ _interop_require_default(require("../../Button"));
const _isActive = /*#__PURE__*/ _interop_require_default(require("../../isActive"));
const _LinkDrawer = require("../LinkDrawer");
const _utilities1 = require("../utilities");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
/**
 * This function is called when an new link is created - not when an existing link is edited.
 */ const insertLink = (editor, fields)=>{
    const isCollapsed = editor.selection && _slate.Range.isCollapsed(editor.selection);
    const data = (0, _forms.reduceFieldsToValues)(fields, true);
    const newLink = {
        children: [],
        doc: data.doc,
        fields: data.fields,
        linkType: data.linkType,
        newTab: data.newTab,
        type: 'link',
        url: data.url
    };
    if (isCollapsed || !editor.selection) {
        // If selection anchor and focus are the same,
        // Just inject a new node with children already set
        _slate.Transforms.insertNodes(editor, {
            ...newLink,
            children: [
                {
                    text: String(data.text)
                }
            ]
        });
    } else if (editor.selection) {
        // Otherwise we need to wrap the selected node in a link,
        // Delete its old text,
        // Move the selection one position forward into the link,
        // And insert the text back into the new link
        _slate.Transforms.wrapNodes(editor, newLink, {
            split: true
        });
        _slate.Transforms.delete(editor, {
            at: editor.selection.focus.path,
            unit: 'word'
        });
        _slate.Transforms.move(editor, {
            distance: 1,
            unit: 'offset'
        });
        _slate.Transforms.insertText(editor, String(data.text), {
            at: editor.selection.focus.path
        });
    }
    _slatereact.ReactEditor.focus(editor);
};
const LinkButton = ({ fieldProps })=>{
    const customFieldSchema = fieldProps?.admin?.link?.fields;
    const { user } = (0, _utilities.useAuth)();
    const { code: locale } = (0, _utilities.useLocale)();
    const [initialState, setInitialState] = (0, _react.useState)({});
    const { i18n, t } = (0, _reacti18next.useTranslation)([
        'upload',
        'general'
    ]);
    const editor = (0, _slatereact.useSlate)();
    const config = (0, _utilities.useConfig)();
    const [fieldSchema] = (0, _react.useState)(()=>{
        const fieldsUnsanitized = (0, _utilities1.transformExtraFields)(customFieldSchema, config, i18n);
        // Sanitize custom fields here
        const validRelationships = config.collections.map((c)=>c.slug) || [];
        const fields = (0, _config.sanitizeFields)({
            config: config,
            fields: fieldsUnsanitized,
            validRelationships
        });
        return fields;
    });
    const { closeModal, openModal } = (0, _modal.useModal)();
    const drawerSlug = (0, _elements.useDrawerSlug)('rich-text-link');
    const { getDocPreferences } = (0, _utilities.useDocumentInfo)();
    return /*#__PURE__*/ _react.default.createElement(_react.Fragment, null, /*#__PURE__*/ _react.default.createElement(_Button.default, {
        className: "link",
        format: "link",
        onClick: async ()=>{
            if ((0, _isActive.default)(editor, 'link')) {
                (0, _utilities1.unwrapLink)(editor);
            } else {
                openModal(drawerSlug);
                const isCollapsed = editor.selection && _slate.Range.isCollapsed(editor.selection);
                if (!isCollapsed) {
                    const data = {
                        text: editor.selection ? _slate.Editor.string(editor, editor.selection) : ''
                    };
                    const preferences = await getDocPreferences();
                    const state = await (0, _utilities.buildStateFromSchema)({
                        config,
                        data,
                        fieldSchema,
                        locale,
                        operation: 'create',
                        preferences,
                        t,
                        user
                    });
                    setInitialState(state);
                }
            }
        },
        tooltip: t('fields:addLink')
    }, /*#__PURE__*/ _react.default.createElement(_Link.default, null)), /*#__PURE__*/ _react.default.createElement(_LinkDrawer.LinkDrawer, {
        drawerSlug: drawerSlug,
        fieldSchema: fieldSchema,
        handleClose: ()=>{
            closeModal(drawerSlug);
        },
        handleModalSubmit: (fields)=>{
            insertLink(editor, fields);
            closeModal(drawerSlug);
        },
        initialState: initialState
    }));
};

//# sourceMappingURL=data:application/json;base64,