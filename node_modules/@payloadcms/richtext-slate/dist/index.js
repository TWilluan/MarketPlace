"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ElementButton: function() {
        return _Button.default;
    },
    LeafButton: function() {
        return _Button1.default;
    },
    nodeIsTextNode: function() {
        return _types.nodeIsTextNode;
    },
    slateEditor: function() {
        return slateEditor;
    },
    toggleElement: function() {
        return _toggle.default;
    }
});
const _utilities = require("payload/utilities");
const _cell = /*#__PURE__*/ _interop_require_default(require("./cell"));
const _richTextRelationshipPromise = require("./data/richTextRelationshipPromise");
const _validation = require("./data/validation");
const _field = /*#__PURE__*/ _interop_require_default(require("./field"));
const _Button = /*#__PURE__*/ _interop_require_default(require("./field/elements/Button"));
const _toggle = /*#__PURE__*/ _interop_require_default(require("./field/elements/toggle"));
const _Button1 = /*#__PURE__*/ _interop_require_default(require("./field/leaves/Button"));
const _types = require("./types");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function slateEditor(args) {
    return {
        CellComponent: (0, _utilities.withMergedProps)({
            Component: _cell.default,
            toMergeIntoProps: args
        }),
        FieldComponent: (0, _utilities.withMergedProps)({
            Component: _field.default,
            toMergeIntoProps: args
        }),
        outputSchema: ({ isRequired })=>{
            return {
                type: (0, _utilities.withNullableJSONSchemaType)('array', isRequired),
                items: {
                    type: 'object'
                }
            };
        },
        populationPromise ({ context, currentDepth, depth, draft, field, findMany, flattenLocales, overrideAccess, populationPromises, req, showHiddenFields, siblingDoc }) {
            if (field.admin?.elements?.includes('relationship') || field.admin?.elements?.includes('upload') || field.admin?.elements?.includes('link') || !field?.admin?.elements) {
                return (0, _richTextRelationshipPromise.richTextRelationshipPromise)({
                    context,
                    currentDepth,
                    depth,
                    draft,
                    field,
                    findMany,
                    flattenLocales,
                    overrideAccess,
                    populationPromises,
                    req,
                    showHiddenFields,
                    siblingDoc
                });
            }
            return null;
        },
        validate: _validation.richTextValidate
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJpY2hUZXh0QWRhcHRlciB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB7IHdpdGhNZXJnZWRQcm9wcywgd2l0aE51bGxhYmxlSlNPTlNjaGVtYVR5cGUgfSBmcm9tICdwYXlsb2FkL3V0aWxpdGllcydcblxuaW1wb3J0IHR5cGUgeyBBZGFwdGVyQXJndW1lbnRzIH0gZnJvbSAnLi90eXBlcydcblxuaW1wb3J0IFJpY2hUZXh0Q2VsbCBmcm9tICcuL2NlbGwnXG5pbXBvcnQgeyByaWNoVGV4dFJlbGF0aW9uc2hpcFByb21pc2UgfSBmcm9tICcuL2RhdGEvcmljaFRleHRSZWxhdGlvbnNoaXBQcm9taXNlJ1xuaW1wb3J0IHsgcmljaFRleHRWYWxpZGF0ZSB9IGZyb20gJy4vZGF0YS92YWxpZGF0aW9uJ1xuaW1wb3J0IFJpY2hUZXh0RmllbGQgZnJvbSAnLi9maWVsZCdcblxuZXhwb3J0IGZ1bmN0aW9uIHNsYXRlRWRpdG9yKGFyZ3M6IEFkYXB0ZXJBcmd1bWVudHMpOiBSaWNoVGV4dEFkYXB0ZXI8YW55W10sIEFkYXB0ZXJBcmd1bWVudHMsIGFueT4ge1xuICByZXR1cm4ge1xuICAgIENlbGxDb21wb25lbnQ6IHdpdGhNZXJnZWRQcm9wcyh7XG4gICAgICBDb21wb25lbnQ6IFJpY2hUZXh0Q2VsbCxcbiAgICAgIHRvTWVyZ2VJbnRvUHJvcHM6IGFyZ3MsXG4gICAgfSksXG4gICAgRmllbGRDb21wb25lbnQ6IHdpdGhNZXJnZWRQcm9wcyh7XG4gICAgICBDb21wb25lbnQ6IFJpY2hUZXh0RmllbGQsXG4gICAgICB0b01lcmdlSW50b1Byb3BzOiBhcmdzLFxuICAgIH0pLFxuICAgIG91dHB1dFNjaGVtYTogKHsgaXNSZXF1aXJlZCB9KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB3aXRoTnVsbGFibGVKU09OU2NoZW1hVHlwZSgnYXJyYXknLCBpc1JlcXVpcmVkKSxcbiAgICAgICAgaXRlbXM6IHtcbiAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICB9LFxuICAgIHBvcHVsYXRpb25Qcm9taXNlKHtcbiAgICAgIGNvbnRleHQsXG4gICAgICBjdXJyZW50RGVwdGgsXG4gICAgICBkZXB0aCxcbiAgICAgIGRyYWZ0LFxuICAgICAgZmllbGQsXG4gICAgICBmaW5kTWFueSxcbiAgICAgIGZsYXR0ZW5Mb2NhbGVzLFxuICAgICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgICBwb3B1bGF0aW9uUHJvbWlzZXMsXG4gICAgICByZXEsXG4gICAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgICAgc2libGluZ0RvYyxcbiAgICB9KSB7XG4gICAgICBpZiAoXG4gICAgICAgIGZpZWxkLmFkbWluPy5lbGVtZW50cz8uaW5jbHVkZXMoJ3JlbGF0aW9uc2hpcCcpIHx8XG4gICAgICAgIGZpZWxkLmFkbWluPy5lbGVtZW50cz8uaW5jbHVkZXMoJ3VwbG9hZCcpIHx8XG4gICAgICAgIGZpZWxkLmFkbWluPy5lbGVtZW50cz8uaW5jbHVkZXMoJ2xpbmsnKSB8fFxuICAgICAgICAhZmllbGQ/LmFkbWluPy5lbGVtZW50c1xuICAgICAgKSB7XG4gICAgICAgIHJldHVybiByaWNoVGV4dFJlbGF0aW9uc2hpcFByb21pc2Uoe1xuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgY3VycmVudERlcHRoLFxuICAgICAgICAgIGRlcHRoLFxuICAgICAgICAgIGRyYWZ0LFxuICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgIGZpbmRNYW55LFxuICAgICAgICAgIGZsYXR0ZW5Mb2NhbGVzLFxuICAgICAgICAgIG92ZXJyaWRlQWNjZXNzLFxuICAgICAgICAgIHBvcHVsYXRpb25Qcm9taXNlcyxcbiAgICAgICAgICByZXEsXG4gICAgICAgICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICAgICAgICBzaWJsaW5nRG9jLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9LFxuICAgIHZhbGlkYXRlOiByaWNoVGV4dFZhbGlkYXRlLFxuICB9XG59XG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgRWxlbWVudEJ1dHRvbiB9IGZyb20gJy4vZmllbGQvZWxlbWVudHMvQnV0dG9uJ1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIHRvZ2dsZUVsZW1lbnQgfSBmcm9tICcuL2ZpZWxkL2VsZW1lbnRzL3RvZ2dsZSdcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTGVhZkJ1dHRvbiB9IGZyb20gJy4vZmllbGQvbGVhdmVzL0J1dHRvbidcbmV4cG9ydCB0eXBlIHtcbiAgQWRhcHRlckFyZ3VtZW50cyxcbiAgRWxlbWVudE5vZGUsXG4gIEZpZWxkUHJvcHMsXG4gIFJpY2hUZXh0Q3VzdG9tRWxlbWVudCxcbiAgUmljaFRleHRDdXN0b21MZWFmLFxuICBSaWNoVGV4dEVsZW1lbnQsXG4gIFJpY2hUZXh0TGVhZixcbiAgVGV4dE5vZGUsXG59IGZyb20gJy4vdHlwZXMnXG5cbmV4cG9ydCB7IG5vZGVJc1RleHROb2RlIH0gZnJvbSAnLi90eXBlcydcbiJdLCJuYW1lcyI6WyJFbGVtZW50QnV0dG9uIiwiTGVhZkJ1dHRvbiIsIm5vZGVJc1RleHROb2RlIiwic2xhdGVFZGl0b3IiLCJ0b2dnbGVFbGVtZW50IiwiYXJncyIsIkNlbGxDb21wb25lbnQiLCJ3aXRoTWVyZ2VkUHJvcHMiLCJDb21wb25lbnQiLCJSaWNoVGV4dENlbGwiLCJ0b01lcmdlSW50b1Byb3BzIiwiRmllbGRDb21wb25lbnQiLCJSaWNoVGV4dEZpZWxkIiwib3V0cHV0U2NoZW1hIiwiaXNSZXF1aXJlZCIsInR5cGUiLCJ3aXRoTnVsbGFibGVKU09OU2NoZW1hVHlwZSIsIml0ZW1zIiwicG9wdWxhdGlvblByb21pc2UiLCJjb250ZXh0IiwiY3VycmVudERlcHRoIiwiZGVwdGgiLCJkcmFmdCIsImZpZWxkIiwiZmluZE1hbnkiLCJmbGF0dGVuTG9jYWxlcyIsIm92ZXJyaWRlQWNjZXNzIiwicG9wdWxhdGlvblByb21pc2VzIiwicmVxIiwic2hvd0hpZGRlbkZpZWxkcyIsInNpYmxpbmdEb2MiLCJhZG1pbiIsImVsZW1lbnRzIiwiaW5jbHVkZXMiLCJyaWNoVGV4dFJlbGF0aW9uc2hpcFByb21pc2UiLCJ2YWxpZGF0ZSIsInJpY2hUZXh0VmFsaWRhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBc0VvQkEsYUFBYTtlQUFiQSxlQUFhOztJQUdiQyxVQUFVO2VBQVZBLGdCQUFVOztJQVlyQkMsY0FBYztlQUFkQSxxQkFBYzs7SUExRVBDLFdBQVc7ZUFBWEE7O0lBNkRJQyxhQUFhO2VBQWJBLGVBQWE7OzsyQkF0RTJCOzZEQUluQzs2Q0FDbUI7NEJBQ1g7OERBQ1A7K0RBNkRlOytEQUVBO2dFQUNIO3VCQVlQOzs7Ozs7QUExRXhCLFNBQVNELFlBQVlFLElBQXNCO0lBQ2hELE9BQU87UUFDTEMsZUFBZUMsSUFBQUEsMEJBQWUsRUFBQztZQUM3QkMsV0FBV0MsYUFBWTtZQUN2QkMsa0JBQWtCTDtRQUNwQjtRQUNBTSxnQkFBZ0JKLElBQUFBLDBCQUFlLEVBQUM7WUFDOUJDLFdBQVdJLGNBQWE7WUFDeEJGLGtCQUFrQkw7UUFDcEI7UUFDQVEsY0FBYyxDQUFDLEVBQUVDLFVBQVUsRUFBRTtZQUMzQixPQUFPO2dCQUNMQyxNQUFNQyxJQUFBQSxxQ0FBMEIsRUFBQyxTQUFTRjtnQkFDMUNHLE9BQU87b0JBQ0xGLE1BQU07Z0JBQ1I7WUFDRjtRQUNGO1FBQ0FHLG1CQUFrQixFQUNoQkMsT0FBTyxFQUNQQyxZQUFZLEVBQ1pDLEtBQUssRUFDTEMsS0FBSyxFQUNMQyxLQUFLLEVBQ0xDLFFBQVEsRUFDUkMsY0FBYyxFQUNkQyxjQUFjLEVBQ2RDLGtCQUFrQixFQUNsQkMsR0FBRyxFQUNIQyxnQkFBZ0IsRUFDaEJDLFVBQVUsRUFDWDtZQUNDLElBQ0VQLE1BQU1RLEtBQUssRUFBRUMsVUFBVUMsU0FBUyxtQkFDaENWLE1BQU1RLEtBQUssRUFBRUMsVUFBVUMsU0FBUyxhQUNoQ1YsTUFBTVEsS0FBSyxFQUFFQyxVQUFVQyxTQUFTLFdBQ2hDLENBQUNWLE9BQU9RLE9BQU9DLFVBQ2Y7Z0JBQ0EsT0FBT0UsSUFBQUEsd0RBQTJCLEVBQUM7b0JBQ2pDZjtvQkFDQUM7b0JBQ0FDO29CQUNBQztvQkFDQUM7b0JBQ0FDO29CQUNBQztvQkFDQUM7b0JBQ0FDO29CQUNBQztvQkFDQUM7b0JBQ0FDO2dCQUNGO1lBQ0Y7WUFDQSxPQUFPO1FBQ1Q7UUFDQUssVUFBVUMsNEJBQWdCO0lBQzVCO0FBQ0YifQ==